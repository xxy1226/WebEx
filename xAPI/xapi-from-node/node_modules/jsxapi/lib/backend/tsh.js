'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _log = require('../log');

var _log2 = _interopRequireDefault(_log);

var _jsonParser = require('../json-parser');

var _rpc = require('../xapi/rpc');

var rpc = _interopRequireWildcard(_rpc);

var _ = require('./');

var _2 = _interopRequireDefault(_);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @external {Duplex} https://nodejs.org/api/stream.html#stream_class_stream_duplex
 */

function formatValue(value) {
  switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {
    case 'boolean':
      return value ? 'True' : 'False';
    case 'number':
    case 'string':
      return JSON.stringify(value);
    default:
      throw new TypeError('Invalid value ' + JSON.stringify(value));
  }
}

function paramString(key, value) {
  var values = Array.isArray(value) ? value : [value];
  return values.map(function (v) {
    return key + ': ' + formatValue(v);
  }).join(' ');
}

/**
 * Backend to communicate with a {@link Duplex} stream talking tshell (tsh).
 *
 * @extends {Backend}
 */

var TSHBackend = function (_Backend) {
  _inherits(TSHBackend, _Backend);

  /**
   * @param {Duplex} transport - Stream to interact with TSH.
   */
  function TSHBackend(transport) {
    _classCallCheck(this, TSHBackend);

    var _this = _possibleConstructorReturn(this, (TSHBackend.__proto__ || Object.getPrototypeOf(TSHBackend)).call(this));

    _this.feedbackQueries = {};
    _this.nextFeedbackId = 0;
    _this.parser = new _jsonParser.JSONParser();
    _this.requests = {};
    _this.transport = transport;
    _this.setState('idle');
    _this.buffer = '';

    _this.parser.on('data', _this.onParserData.bind(_this));
    _this.parser.on('error', function (error) {
      return _this.emit('error', error);
    });

    Object.defineProperty(_this, 'isReady', {
      configurable: false,
      enumerable: true,
      writable: false,
      value: new Promise(function (resolve, reject) {
        if (_this.state !== 'idle') {
          reject(new Error('TSHBackend is not in an idle state'));
          return;
        }

        _this.connectResolve = resolve;
        _this.setState('connecting');
      })
    });

    _this.transport.on('data', function (data) {
      return _this.onTransportData(data);
    }).on('error', function (error) {
      return _this.emit('error', error);
    }).on('close', function () {
      _this.setState('closed');
      _this.emit('close');
    });
    return _this;
  }

  _createClass(TSHBackend, [{
    key: 'bufferHasOK',
    value: function bufferHasOK(buffer) {
      var lines = (this.buffer + buffer.toString()).split('\n');
      if (lines.length) {
        this.buffer = lines[lines.length - 1];
      }
      return lines.some(function (line) {
        return line === 'OK';
      });
    }
  }, {
    key: 'setState',
    value: function setState(newState) {
      this.state = newState;
    }

    /**
     * @override
     */

  }, {
    key: 'close',
    value: function close() {
      this.transport.close();
    }
  }, {
    key: 'onParserData',
    value: function onParserData(data) {
      if (!{}.hasOwnProperty.call(data, 'ResultId')) {
        _log2.default.debug('[tsh] (feedback):', JSON.stringify(data));
        this.onFeedback(rpc.parseFeedbackResponse(data));
      } else {
        _log2.default.debug('[tsh] (result):', JSON.stringify(data));
        this.onResult(data.ResultId, data);
      }
    }
  }, {
    key: 'onTransportData',
    value: function onTransportData(data) {
      switch (this.state) {
        case 'connecting':
          if (this.bufferHasOK(data)) {
            _log2.default.debug('[transport] (connecting)', data.toString());
            this.setState('initializing');
            this.write('echo off\n');
            this.emit('initializing');
          }
          break;
        case 'initializing':
          if (this.bufferHasOK(data)) {
            _log2.default.debug('[transport] (initializing)', data.toString());
            this.buffer = '';
            this.write('xpreferences outputmode json\n');
            this.setState('ready');
            this.connectResolve(true);
            this.emit('ready');
          }
          break;
        case 'ready':
          _log2.default.debug('to parser: "' + data.toString() + '"');
          this.parser.write(data);
          break;
        default:
          this.emit('error', new Error('TSHBackend is in an invalid state for input'));
      }
    }

    /**
     * @override
     */

  }, {
    key: 'send',
    value: function send(id, command, body) {
      var cmd = command + ' | resultId="' + id + '"\n';
      if (body !== undefined) {
        cmd += body + '\n';
        var length = cmd.length;
        cmd = '{' + length + '} \n' + cmd;
      }

      this.write(cmd);
    }
  }, {
    key: 'write',
    value: function write(data) {
      _log2.default.debug('write: ' + JSON.stringify(data));
      this.transport.write(data);
    }

    // XAPI json-rpc method handlers

    /**
     * @ignore
     */

  }, {
    key: 'xCommand()',
    value: function xCommand(_ref, send) {
      var method = _ref.method,
          params = _ref.params;
      // eslint-disable-line class-methods-use-this
      var paramsCopy = Object.assign({}, params);
      var body = paramsCopy.body;
      delete paramsCopy.body;

      var tshParams = paramsCopy ? Object.keys(paramsCopy).sort().map(function (k) {
        return paramString(k, paramsCopy[k]);
      }) : [];

      var cmd = method.split('/').concat(tshParams).join(' ');

      return send(cmd, body).then(rpc.createCommandResponse);
    }

    /**
     * @ignore
     */

  }, {
    key: 'xFeedback/Subscribe()',
    value: function xFeedbackSubscribe(_ref2, send) {
      var _this2 = this;

      var params = _ref2.params;

      var query = params.Query.map(function (part) {
        return typeof part === 'number' ? '[' + part + ']' : '/' + part;
      }).join('');
      return send('xfeedback register ' + query).then(function () {
        var id = _this2.nextFeedbackId;
        _this2.nextFeedbackId += 1;
        _this2.feedbackQueries[id] = query;
        return { Id: id };
      });
    }

    /**
     * @ignore
     */

  }, {
    key: 'xFeedback/Unsubscribe()',
    value: function xFeedbackUnsubscribe(_ref3, send) {
      var _this3 = this;

      var params = _ref3.params;

      var id = params.Id;

      if (!{}.hasOwnProperty.call(this.feedbackQueries, id)) {
        throw new Error('Invalid feedback id: ' + id);
      }

      var path = this.feedbackQueries[id];

      return send('xfeedback deregister ' + path).then(function () {
        delete _this3.feedbackQueries[id];
        return true;
      });
    }

    /**
     * @ignore
     */

  }, {
    key: 'xGet()',
    value: function xGet(request, send) {
      // eslint-disable-line class-methods-use-this
      var path = request.params.Path.join(' ');
      return send('x' + path).then(function (response) {
        return rpc.createGetResponse(request, response);
      });
    }

    /**
     * @ignore
     */

  }, {
    key: 'xSet()',
    value: function xSet(request, send) {
      // eslint-disable-line class-methods-use-this
      var params = request.params;

      var path = params.Path.join(' ');
      var value = formatValue(params.Value);
      return send('x' + path + ': ' + value).then(function (response) {
        return rpc.createSetResponse(request, response);
      });
    }
  }]);

  return TSHBackend;
}(_2.default);

exports.default = TSHBackend;