'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _events = require('events');

var _log = require('../log');

var _log2 = _interopRequireDefault(_log);

var _rpc = require('../xapi/rpc');

var rpc = _interopRequireWildcard(_rpc);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @external {EventEmitter} https://nodejs.org/api/events.html#events_class_eventemitter
 */

/**
 * Backend abstract class.
 *
 * @extends {EventEmitter}
 * @interface
 *
 * @example <caption>Custom backend implementation</caption>
 * class MyBackend extends Backend {
 *   constructor(transport) {
 *     this._transport = transport.on('data', this._recvMsg.bind(this));
 *   }
 *
 *   _recvMsg(message) {
 *     const id = ... // determine request id
 *     const result = ... // process message
 *     this.onResult(id, result);
 *   }
 *
 *   // `command` is passed by the method handler, e.g. `xCommand()`.
 *   send(id, command) {
 *     const message = ... // use id and command to construct message
 *     this._transport.send(message);
 *   }
 *
 *   // this is dispatched by .execute()
 *   'xCommand()'(request, send) {
 *     const command = ... // do stuff with request
 *     return send(command).then(result => {
 *       // process result
 *     });
 *   }
 * }
 */
var Backend = function (_EventEmitter) {
  _inherits(Backend, _EventEmitter);

  function Backend() {
    _classCallCheck(this, Backend);

    var _this = _possibleConstructorReturn(this, (Backend.__proto__ || Object.getPrototypeOf(Backend)).call(this));

    _this.requests = {};
    return _this;
  }

  /**
   * Close the backend connection and free up resources. The backend should not
   * be used after it is closed and a new instance is required in order
   * re-initialize.
   */


  _createClass(Backend, [{
    key: 'close',
    value: function close() {} // eslint-disable-line class-methods-use-this


    /**
     * Promise that is resolved once the backend is ready to receive commands.
     *
     * @return {Promise} - Promised resolved when the backend is ready.
     */

  }, {
    key: 'defaultHandler',


    /**
     * Default method handler. Called if there isn't a handler specified for the
     * method type. The default handler dies unless it is overridden in a sub-class.
     *
     * @param {Object} request - JSON-RPC request
     * @param {Function} send - Function for dispatching the request to the backend service.
     */
    value: function defaultHandler(_ref, send) {
      var method = _ref.method;
      // eslint-disable-line class-methods-use-this, no-unused-vars
      return Promise.reject(new Error('Invalid request method: ' + method));
    }

    /**
     * Determine the type of the JSON-RPC request. The type is used for
     * dispatching the request to the different rpc handlers. Sub-classes may
     * override this for custom routing behavior.
     *
     * @param {Object} request - JSON-RPC request
     * @return {string} - Request method type.
     */

  }, {
    key: 'getRequestType',
    value: function getRequestType(_ref2) {
      var method = _ref2.method;
      // eslint-disable-line class-methods-use-this
      if (method.startsWith('xCommand')) {
        return 'xCommand';
      }
      return method;
    }

    /**
     * Transmit the given JSON-RPC payload to the backend service. The request
     * type is determined using {@link getRequestType} and the request is
     * delegated to method handlers, if they are defined for the given type. The
     * default handler ({@link defaultHandler}) is used if there is no handler
     * for the request type.
     *
     * Method handlers are defined on the sub-class, using the naming convention of
     * `<requestType>()` (notice the '()' suffix). Method handlers are passed the
     * request object and a `send` function to invoke for the request.
     *
     * @param {Object} request - JSON-RPC request to execute agains the backend service.
     * @return {Promise} - Promise resolved when response is received.
     */

  }, {
    key: 'execute',
    value: function execute(request) {
      var _this2 = this;

      var id = request.id;

      var type = this.getRequestType(request);
      var handlerName = type + '()';
      var handler = typeof this[handlerName] === 'function' ? this[handlerName] : this.defaultHandler;

      return this.isReady.then(function () {
        var promise = new Promise(function (resolve) {
          _this2.requests[id] = resolve;
        });
        var sender = function sender(cmd, body) {
          _this2.send(id, cmd, body);
          return promise;
        };
        _log2.default.debug('[backend] (request):', request);
        var result = handler.call(_this2, request, sender);
        return Promise.resolve(result);
      }).then(function (result) {
        _log2.default.debug('[backend] (success):', result);
        _this2.emit('data', rpc.createResponse(id, result));
      }).catch(function (error) {
        _log2.default.debug('[backend] (failure):', error);
        _this2.emit('data', rpc.createErrorResponse(id, error));
      });
    }

    /**
     * Called when receiving feedback from the backend service.
     *
     * @param {Object} result - JSON-RPC params data for the feedback event.
     */

  }, {
    key: 'onFeedback',
    value: function onFeedback(result) {
      this.emit('data', rpc.createRequest(null, 'xFeedback/Event', result));
    }

    /**
     * Called when the backend is done processing the response and ready to hand
     * it over to the XAPI frontend. The response should be a valid JSON-RPC
     * response.
     *
     * @param {string} id - Request id of the JSON-RPC request.
     * @param {Object} result - Result from the backend service.
     */

  }, {
    key: 'onResult',
    value: function onResult(id, result) {
      if (id) {
        var resolve = this.requests[id];
        delete this.requests[id];
        resolve(result);
      }
    }

    /**
     * Used to send the actual command to the backend service. The command
     * should be generated by the method handler and .
     *
     * @param {string} id - The request id.
     * @param {Array|Object|number|string} command - Command from method handler.
     * @abstract
     */

  }, {
    key: 'send',
    value: function send(id, command) {
      // eslint-disable-line class-methods-use-this, no-unused-vars
      throw new Error('Backend class must override .send()');
    }
  }, {
    key: 'isReady',
    get: function get() {
      // eslint-disable-line class-methods-use-this
      return Promise.resolve(true);
    }
  }]);

  return Backend;
}(_events.EventEmitter);

exports.default = Backend;