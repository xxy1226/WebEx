'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _events = require('events');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @external {WebSocket} https://developer.mozilla.org/en-US/docs/Web/API/WebSocket
 */

/**
 * Backend to communicate with a WebSocket server.
 *
 * This backend expects to talk directly to a JSON-RPC WebSocket backend.
 * Authentication has to be handled by the transport layer, there is no
 * support for that on the socket itself.
 *
 * Once the socket is open, it is expected to be in the ready state.
 *
 * @implements {Backend}
 */
var WSBackend = function (_EventEmitter) {
  _inherits(WSBackend, _EventEmitter);

  /**
   * @param {Object|string} urlOrWS - WebSocket object or URL of the server.
   */
  function WSBackend(urlOrWS) {
    _classCallCheck(this, WSBackend);

    /**
     * @type {WebSocket}
     */
    var _this = _possibleConstructorReturn(this, (WSBackend.__proto__ || Object.getPrototypeOf(WSBackend)).call(this));

    _this.ws = typeof urlOrWS !== 'string' ? urlOrWS : new global.WebSocket(urlOrWS);
    _this.ws.onclose = _this.handleClose.bind(_this);
    _this.ws.onerror = _this.handleError.bind(_this);
    _this.ws.onmessage = _this.handleMessage.bind(_this);

    var resolveReady = void 0;
    /**
     * @type {Promise}
     */
    _this.isReady = new Promise(function (r) {
      resolveReady = r;
    });
    _this.ws.onopen = function () {
      _this.emit('ready');
      resolveReady();
    };
    return _this;
  }

  _createClass(WSBackend, [{
    key: 'close',
    value: function close() {
      this.ws.close();
    }
  }, {
    key: 'handleClose',
    value: function handleClose(event) {
      if (event.code !== 1000) {
        this.emit('error', 'WebSocket closed unexpectedly');
      } else {
        this.emit('close');
      }
    }
  }, {
    key: 'handleError',
    value: function handleError() {
      this.emit('error', 'WebSocket error');
    }
  }, {
    key: 'handleMessage',
    value: function handleMessage(message) {
      var data = JSON.parse(message.data);
      this.emit('data', data);
    }
  }, {
    key: 'execute',
    value: function execute(command) {
      var _this2 = this;

      this.isReady.then(function () {
        _this2.ws.send(JSON.stringify(command));
      });
    }
  }]);

  return WSBackend;
}(_events.EventEmitter);

exports.default = WSBackend;