'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _stream = require('stream');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Duplex stream transport for integrations where JSXAPI does not have direct
 * access to the network or local ipc. E.g. for sandboxing or test stubs.
 */
var StreamTransport = function (_Duplex) {
  _inherits(StreamTransport, _Duplex);

  /**
   * Creates a {@link Duplex} stream.
   *
   * @param {function(data: string)} send - Callback for outbound data
   * @return {Duplex} - Duplex stream.
   */
  function StreamTransport(send, options) {
    _classCallCheck(this, StreamTransport);

    var _this = _possibleConstructorReturn(this, (StreamTransport.__proto__ || Object.getPrototypeOf(StreamTransport)).call(this, options));

    _this.buffer = [];
    _this.canPush = false;
    _this.send = send;
    _this.on('finish', function () {
      _this.emit('close');
    });
    return _this;
  }

  /**
   * Closes the stream transport
   */


  _createClass(StreamTransport, [{
    key: 'close',
    value: function close() {
      this.end();
    }

    /**
     * @param {string} data - Push inbound data from the XAPI service to JSXAPI.
     * @return {boolean} - Boolean signaling if the stream can receive more data.
     */

  }, {
    key: 'push',
    value: function push(data) {
      this.buffer.push(data);
      return this.attemptFlush();
    }
  }, {
    key: 'attemptFlush',
    value: function attemptFlush() {
      while (this.canPush && this.buffer.length) {
        this.canPush = _get(StreamTransport.prototype.__proto__ || Object.getPrototypeOf(StreamTransport.prototype), 'push', this).call(this, this.buffer.shift());
      }
      return this.canPush;
    }
  }, {
    key: '_read',
    value: function _read() {
      this.canPush = true;
      this.attemptFlush();
    }
  }, {
    key: '_write',
    value: function _write(chunk, encoding, callback) {
      this.send(chunk, encoding, callback);
    }
  }]);

  return StreamTransport;
}(_stream.Duplex);

exports.default = StreamTransport;