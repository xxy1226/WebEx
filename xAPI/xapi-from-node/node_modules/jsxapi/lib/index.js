'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.connect = connect;

var _urlParse = require('url-parse');

var _urlParse2 = _interopRequireDefault(_urlParse);

var _ws = require('ws');

var _ws2 = _interopRequireDefault(_ws);

var _log = require('./log');

var _log2 = _interopRequireDefault(_log);

var _ssh = require('./transport/ssh');

var _ssh2 = _interopRequireDefault(_ssh);

var _xapi = require('./xapi');

var _xapi2 = _interopRequireDefault(_xapi);

var _tsh = require('./backend/tsh');

var _tsh2 = _interopRequireDefault(_tsh);

var _ws3 = require('./backend/ws');

var _ws4 = _interopRequireDefault(_ws3);

var _tsh3 = require('./transport/tsh');

var _tsh4 = _interopRequireDefault(_tsh3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Connect to an XAPI endpoint.
 *
 * @example
 * const xapi = connect('ssh://host.example.com:22');
 *
 * @param {string} url - Connection specification.
 * @param {Object} [options] - Connect options.
 * @param {string} [options.host] -
 *     Hostname to connect to.
 * @param {string} [options.username] -
 *     Username to authenticate with if protocol requires authentication.
 * @param {string} [options.password] -
 *     Password to authenticate with if protocol requires authentication.
 * @param {string} [options.loglevel] -
 *     Set the internal log level.
 * @return {XAPI} - XAPI interface connected to the given URI.
 */
function connect(url, options) {
  // eslint-disable-line import/prefer-default-export
  if (arguments.length === 1 && (typeof url === 'undefined' ? 'undefined' : _typeof(url)) === 'object') {
    /* eslint-disable no-param-reassign */
    options = url;
    url = '';
    /* eslint-enable */
  }

  var parsedUrl = (0, _urlParse2.default)(url.match(/^\w+:\/\//) ? url : 'ssh://' + url);

  var opts = Object.assign({
    host: '',
    password: '',
    protocol: 'ssh:',
    username: 'admin',
    loglevel: 'warn'
  }, parsedUrl, options);

  var host = opts.hostname,
      port = opts.port;

  delete opts.hostname;
  opts.host = host;

  _log2.default.setLevel(opts.loglevel);
  _log2.default.info('connecting to', url);

  var backend = void 0;
  switch (opts.protocol) {
    case '':
    case 'ssh:':
      {
        var transport = (0, _ssh2.default)(opts);
        backend = new _tsh2.default(transport);
        break;
      }
    case 'tsh:':
      {
        var _transport = (0, _tsh4.default)(host, port);
        backend = new _tsh2.default(_transport);
        break;
      }
    case 'ws:':
    case 'wss:':
      {
        var _transport2 = new _ws2.default(url);
        backend = new _ws4.default(_transport2);
        break;
      }
    default:
      throw new Error('Invalid protocol: ' + opts.protocol);
  }

  return new _xapi2.default(backend);
}