'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JSONParser = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.parseJSON = parseJSON;

var _stream = require('stream');

var _jsonparse = require('jsonparse');

var _jsonparse2 = _interopRequireDefault(_jsonparse);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @external {Transform} https://nodejs.org/api/stream.html#stream_class_stream_transform
 */

/**
 * Streaming JSON parser. Implements the Node.js {@link Duplex} stream API.
 */
var JSONParser = exports.JSONParser = function (_Transform) {
  _inherits(JSONParser, _Transform);

  function JSONParser() {
    _classCallCheck(this, JSONParser);

    var _this = _possibleConstructorReturn(this, (JSONParser.__proto__ || Object.getPrototypeOf(JSONParser)).call(this, { objectMode: true }));

    _this.enc = 'utf8'; // Default encoding
    _this.reset();
    return _this;
  }

  _createClass(JSONParser, [{
    key: 'reset',
    value: function reset() {
      this.parser = new _jsonparse2.default();
      this.parser.onError = this.onError.bind(this);
      this.parser.onValue = this.onValue.bind(this);
    }
  }, {
    key: 'onError',
    value: function onError(e) {
      this.emit('error', e);
      this.reset();
    }
  }, {
    key: 'onValue',
    value: function onValue(value) {
      if (!this.parser.stack.length) {
        this.push(value);
      }
    }
  }, {
    key: '_flush',
    value: function _flush(callback) {
      if (this.parser.stack.length) {
        this.onError(new Error('Unexpected end of input'));
      }
      callback();
    }
  }, {
    key: '_transform',
    value: function _transform(chunk, encoding, callback) {
      var _this2 = this;

      var data = chunk.toString(this.enc);
      data.split(/\n/).forEach(function (line) {
        try {
          _this2.parser.write(line);
        } catch (error) {
          _this2.onError(error);
        }
      });
      callback();
    }
  }]);

  return JSONParser;
}(_stream.Transform);

/**
 * Synchronous frontend to {@link JSONparser}.
 *
 * @param {string} json - JSON string input.
 * @return {Object} - Parsed JSON object.
 */


function parseJSON(json) {
  var obj = void 0;
  var parser = new JSONParser();

  parser.on('data', function (_obj) {
    obj = _obj;
  });
  parser.end(json);

  return obj;
}