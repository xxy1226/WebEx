#!/usr/bin/env node
'use strict';

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _repl = require('repl');

var _repl2 = _interopRequireDefault(_repl);

var _package = require('../package.json');

var _package2 = _interopRequireDefault(_package);

var _log = require('./log');

var _log2 = _interopRequireDefault(_log);

var _ = require('./');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function evalFile(source, xapi) {
  var context = new Function('xapi', source); // eslint-disable-line no-new-func
  context(xapi);
}

function startRepl(xapi) {
  var repl = _repl2.default.start({});
  repl.on('exit', function () {
    return xapi.close();
  });
  repl.context.xapi = xapi;
}

_commander2.default.version(_package2.default.version).arguments('<host> [file]').description('connect to a codec and launch a repl').option('-p, --port <port>', 'port to connect to', 22).option('-U, --username <user>', 'username to authenticate with', 'admin').option('-P, --password <password>', 'password to authenticate with', '').option('-C, --command <command>', 'command to execute on remote host', '').option('-l, --loglevel <level>', 'set application log level (trace|debug|info|warn|error|silent)', /^(trace|debug|info|warn|error|silent)$/i, 'warn').action(function (host, file, options) {
  if (!host) {
    _log2.default.error('Please specify a host to connect to');
    _commander2.default.help();
  }

  var source = file && _fs2.default.readFileSync(file);
  var xapi = (0, _.connect)(host, options).on('error', function (error) {
    _log2.default.error('xapi error:', error);
  }).on('ready', function () {
    if (source) {
      evalFile(source, xapi);
    } else {
      startRepl(xapi);
    }
  });
}).parse(process.argv);