'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _loglevel = require('loglevel');

var _loglevel2 = _interopRequireDefault(_loglevel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /*
                                                                                                                                                                                                     * This module basically patches the `loglevel` library with some niceities for
                                                                                                                                                                                                     * named loggers. Named loggers prefix the log output with their log name and
                                                                                                                                                                                                     * their level can be set independently.
                                                                                                                                                                                                     */

if (!_loglevel2.default.isPatched) {
  var origMethodFactory = _loglevel2.default.methodFactory;
  var loggers = new Set();

  /*
   * Bless the `log` object with custom plugins
   */
  Object.assign(_loglevel2.default, {
    isPatched: true,

    methodFactory: function methodFactory(methodName, logLevel, loggerName) {
      if (loggerName) {
        loggers.add(loggerName);
      }
      var rawMethod = origMethodFactory(methodName, logLevel, loggerName);
      return function () {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        rawMethod.apply(undefined, ['[' + (loggerName || 'root') + ']'].concat(args));
      };
    },


    /*
     * Returns a list of logger names, excluding the root logger.
     */
    getLoggers: function getLoggers() {
      return [].concat(_toConsumableArray(loggers));
    },
    setGlobalLevel: function setGlobalLevel(level) {
      var allLoggers = [_loglevel2.default].concat(_loglevel2.default.getLoggers().map(function (name) {
        return _loglevel2.default.getLogger(name);
      }));

      allLoggers.forEach(function (logger) {
        logger.setLevel(level);
      });
    },
    setLevelTrace: function setLevelTrace() {
      _loglevel2.default.setGlobalLevel('trace');
    },
    setLevelDebug: function setLevelDebug() {
      _loglevel2.default.setGlobalLevel('debug');
    },
    setLevelInfo: function setLevelInfo() {
      _loglevel2.default.setGlobalLevel('info');
    },
    setLevelWarn: function setLevelWarn() {
      _loglevel2.default.setGlobalLevel('warn');
    },
    setLevelError: function setLevelError() {
      _loglevel2.default.setGlobalLevel('error');
    }
  });

  // Required to apply the plugin to log
  _loglevel2.default.setLevel(_loglevel2.default.getLevel());
}

exports.default = _loglevel2.default.getLogger('jsxapi');