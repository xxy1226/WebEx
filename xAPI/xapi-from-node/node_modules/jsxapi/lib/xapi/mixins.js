'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.mix = mix;

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Mixin for XAPI sections that can trigger feedback.
 *
 * @interface
 */
var Listenable = exports.Listenable = function () {
  function Listenable() {
    _classCallCheck(this, Listenable);
  }

  _createClass(Listenable, [{
    key: 'on',

    /**
     * Register a new listener on the given path.
     *
     * @param {string} path - Path to XAPI entry.
     * @param {function(data: Object): null} listener - Callback handler called on changes.
     * @return {function()} - Handler to deregister the feedback registration.
     */
    value: function on(path, listener) {
      return this.xapi.feedback.on(this.normalizePath(path), listener);
    }

    /**
     * Register a new listener on the given path, de-register
     * after the first change happened.
     *
     * @param {string} path - Path to XAPI entry.
     * @param {function(data: Object): null} listener - Callback handler called on changes.
     * @return {Object} - Handler to deregister the feedback registration.
     */

  }, {
    key: 'once',
    value: function once(path, listener) {
      return this.xapi.feedback.once(this.normalizePath(path), listener);
    }

    /**
     * De-register the given listener on the given path.
     *
     * @deprecated use deactivation handler from `.on()` and `.once()` instead.
     */

  }, {
    key: 'off',
    value: function off() {
      this.xapi.feedback.off();
    }
  }]);

  return Listenable;
}();

/**
 * Mixin for XAPI sections that can hold a value that may be fetched.
 *
 * @interface
 */


var Gettable = exports.Gettable = function () {
  function Gettable() {
    _classCallCheck(this, Gettable);
  }

  _createClass(Gettable, [{
    key: 'get',

    /**
     * Gets the value of the given path.
     *
     * @example
     * xapi.status
     *   .get('Audio Volume')
     *   .then((volume) => { console.log(volume); });
     *
     * @example
     * xapi.config
     *   .get('Audio DefaultVolume')
     *   .then((volume) => { console.log(volume); });
     *
     * @param {string} path - Path to configuration node.
     * @return {Promise} - Resolved to the configuration value when ready.
     */
    value: function get(path) {
      return this.xapi.execute('xGet', {
        Path: this.normalizePath(path)
      });
    }
  }]);

  return Gettable;
}();

/**
 * Mixin for XAPI sections that can hold a value that may be fetched.
 *
 * @interface
 */


var Settable = exports.Settable = function () {
  function Settable() {
    _classCallCheck(this, Settable);
  }

  _createClass(Settable, [{
    key: 'set',

    /**
     * Sets the path to the given value.
     *
     * @example
     * xapi
     *   .config.set('SystemUnit Name', 'My System');
     *
     * @param {string} path - Path to status node.
     * @param {number|string} value - Configuration value.
     * @return {Promise} - Resolved to the status value when ready.
     */
    value: function set(path, value) {
      return this.xapi.execute('xSet', {
        Path: this.normalizePath(path),
        Value: value
      });
    }
  }]);

  return Settable;
}();

/**
 * Extend {Base} class and apply {Mixins}.
 *
 * @param {Object} Base - Base class to extend.
 * @param {Array} Mixins - Mixins to apply.
 * @return Object - New ad-hoc base class with mixins applied.
 */


function mix(Base) {
  var Class = function (_Base) {
    _inherits(Class, _Base);

    function Class() {
      _classCallCheck(this, Class);

      return _possibleConstructorReturn(this, (Class.__proto__ || Object.getPrototypeOf(Class)).apply(this, arguments));
    }

    return Class;
  }(Base);

  for (var _len = arguments.length, Mixins = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    Mixins[_key - 1] = arguments[_key];
  }

  Mixins.forEach(function (mixin) {
    Object.getOwnPropertyNames(mixin.prototype).map(function (key) {
      return [key, mixin.prototype[key]];
    }).filter(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          v = _ref2[1];

      return typeof v === 'function' && v !== 'constructor';
    }).forEach(function (_ref3) {
      var _ref4 = _slicedToArray(_ref3, 2),
          name = _ref4[0],
          method = _ref4[1];

      Class.prototype[name] = method;
    });
  });

  return Class;
}