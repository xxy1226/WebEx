'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _extendableBuiltin(cls) {
  function ExtendableBuiltin() {
    var instance = Reflect.construct(cls, Array.from(arguments));
    Object.setPrototypeOf(instance, Object.getPrototypeOf(this));
    return instance;
  }

  ExtendableBuiltin.prototype = Object.create(cls.prototype, {
    constructor: {
      value: cls,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });

  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(ExtendableBuiltin, cls);
  } else {
    ExtendableBuiltin.__proto__ = cls;
  }

  return ExtendableBuiltin;
}

var UNKNOWN_ERROR = exports.UNKNOWN_ERROR = 0;
var COMMAND_ERROR = exports.COMMAND_ERROR = 1;
var ILLEGAL_VALUE = exports.ILLEGAL_VALUE = 2;
var INVALID_PATH = exports.INVALID_PATH = 3;
var PARAMETER_ERROR = exports.PARAMETER_ERROR = 4;
var INVALID_RESPONSE = exports.INVALID_RESPONSE = 5;
var INVALID_STATUS = exports.INVALID_STATUS = 6;
var METHOD_NOT_FOUND = exports.METHOD_NOT_FOUND = -32601;

var XAPIError = exports.XAPIError = function (_extendableBuiltin2) {
  _inherits(XAPIError, _extendableBuiltin2);

  function XAPIError(code, reason, data) {
    _classCallCheck(this, XAPIError);

    if (typeof reason !== 'string') {
      throw new Error('Reason for XAPIError must be a string');
    }

    if (typeof code !== 'number') {
      throw new Error('Error code for XAPIError must be a number');
    }

    var _this = _possibleConstructorReturn(this, (XAPIError.__proto__ || Object.getPrototypeOf(XAPIError)).call(this, reason));

    _this.code = code;
    if (data !== undefined) {
      _this.data = data;
    }
    return _this;
  }

  return XAPIError;
}(_extendableBuiltin(Error));

var IllegalValueError = exports.IllegalValueError = function (_XAPIError) {
  _inherits(IllegalValueError, _XAPIError);

  function IllegalValueError(reason) {
    _classCallCheck(this, IllegalValueError);

    return _possibleConstructorReturn(this, (IllegalValueError.__proto__ || Object.getPrototypeOf(IllegalValueError)).call(this, ILLEGAL_VALUE, reason));
  }

  return IllegalValueError;
}(XAPIError);

var InvalidPathError = exports.InvalidPathError = function (_XAPIError2) {
  _inherits(InvalidPathError, _XAPIError2);

  function InvalidPathError(reason, xpath) {
    _classCallCheck(this, InvalidPathError);

    var _this3 = _possibleConstructorReturn(this, (InvalidPathError.__proto__ || Object.getPrototypeOf(InvalidPathError)).call(this, INVALID_PATH, reason));

    _this3.data = { xpath: xpath };
    return _this3;
  }

  return InvalidPathError;
}(XAPIError);

var ParameterError = exports.ParameterError = function (_XAPIError3) {
  _inherits(ParameterError, _XAPIError3);

  function ParameterError() {
    _classCallCheck(this, ParameterError);

    return _possibleConstructorReturn(this, (ParameterError.__proto__ || Object.getPrototypeOf(ParameterError)).call(this, PARAMETER_ERROR, 'Invalid or missing parameters'));
  }

  return ParameterError;
}(XAPIError);