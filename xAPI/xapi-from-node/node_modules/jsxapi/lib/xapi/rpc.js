'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.collapse = collapse;
exports.createRequest = createRequest;
exports.createResponse = createResponse;
exports.createErrorResponse = createErrorResponse;
exports.parseFeedbackResponse = parseFeedbackResponse;
exports.createCommandResponse = createCommandResponse;
exports.createGetResponse = createGetResponse;
exports.createSetResponse = createSetResponse;

var _exc = require('./exc');

var scalars = ['number', 'string'];
var isScalar = function isScalar(value) {
  return scalars.indexOf(typeof value === 'undefined' ? 'undefined' : _typeof(value)) >= 0;
};

var VERSION = '2.0';

/*
 * Collapse "Value" into parent + skip lowercase props
 */
function collapse(data) {
  if (Array.isArray(data)) {
    return data.map(collapse);
  } else if (isScalar(data)) {
    return data;
  } else if ({}.hasOwnProperty.call(data, 'Value') && isScalar(data.Value)) {
    return data.Value;
  }

  var result = {};

  Object.keys(data).forEach(function (key) {
    result[key] = collapse(data[key]);
  });

  return result;
}

function createRequest(id, method, params) {
  var request = { jsonrpc: VERSION, method: method };

  if (id) {
    request.id = id;
  }

  if (params) {
    request.params = {};

    Object.keys(params).forEach(function (key) {
      var value = params[key];

      if (key !== 'body' && typeof value === 'string' && value.indexOf('\n') !== -1) {
        throw new Error('Parameters may not contain newline characters');
      }

      request.params[key] = params[key];
    });
  }

  return request;
}

function createResponse(id, result) {
  return { jsonrpc: VERSION, id: id, result: result };
}

function createErrorResponse(id, error) {
  var payload = void 0;

  if (error instanceof _exc.XAPIError) {
    payload = {
      code: error.code,
      message: error.message
    };
  } else {
    payload = {
      code: _exc.UNKNOWN_ERROR,
      message: (error.message || error).toString()
    };
  }

  if ({}.hasOwnProperty.call(error, 'data')) {
    payload.data = error.data;
  }

  return { jsonrpc: VERSION, id: id, error: payload };
}

function parseFeedbackResponse(response) {
  return collapse(response);
}

function assertValidCommandResponse(response) {
  if (!{}.hasOwnProperty.call(response, 'CommandResponse')) {
    throw new _exc.XAPIError(_exc.INVALID_RESPONSE, 'Invalid command response: Missing "CommandResponse" attribute');
  }

  var keys = Object.keys(response.CommandResponse);
  if (keys.length !== 1) {
    throw new _exc.XAPIError(_exc.INVALID_RESPONSE, 'Invalid command response: Wrong number of keys (' + keys.length + ')');
  }

  var root = response.CommandResponse[keys[0]];

  switch (root.status) {
    case 'Error':
      {
        var body = collapse(root);
        var _Error = body.Error,
            Reason = body.Reason,
            XPath = body.XPath;

        if (XPath) {
          throw new _exc.InvalidPathError(Reason, XPath);
        }
        var reason = _Error || Reason || keys[0];
        throw new _exc.XAPIError(_exc.UNKNOWN_ERROR, reason, body);
      }
    case 'ParameterError':
      throw new _exc.ParameterError();
    case 'OK':
      return root;
    default:
      throw new _exc.XAPIError(_exc.INVALID_STATUS, 'Invalid command status: ' + root.status);
  }
}

function createCommandResponse(response) {
  var root = assertValidCommandResponse(response);
  var collapsed = collapse(root);
  return Object.keys(collapsed).length ? collapsed : null;
}

function digObj(path, obj) {
  var parts = path.slice();
  var value = obj;

  var _loop = function _loop() {
    var part = parts.shift();
    if (Array.isArray(value)) {
      value = value.find(function (v) {
        return parseInt(v.id, 10) === part;
      });
    } else if (!{}.hasOwnProperty.call(value, part)) {
      return {
        v: undefined
      };
    } else {
      value = value[part];
    }
  };

  while (parts.length) {
    var _ret = _loop();

    if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
  }

  return value;
}

function createGetResponse(request, response) {
  if ({}.hasOwnProperty.call(response, 'CommandResponse')) {
    assertValidCommandResponse(response);
  }

  return digObj(request.params.Path, collapse(response));
}

function createSetResponse(request, response) {
  if (Object.keys(response).length > 1) {
    var leaf = digObj(request.params.Path, response);
    if (leaf.error === 'True') {
      throw new _exc.IllegalValueError(leaf.Value);
    }
  }
  return null;
}