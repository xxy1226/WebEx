'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Status = exports.Event = exports.Config = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _normalizePath2 = require('./normalizePath');

var _normalizePath3 = _interopRequireDefault(_normalizePath2);

var _mixins = require('./mixins');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Common base class for XAPI section types (commands, configs, events, statuses).
 *
 * @interface
 */
var Component = function () {

  /**
   * @param {XAPI} xapi - XAPI instance.
   */
  function Component(xapi) {
    _classCallCheck(this, Component);

    this.prefix = '';

    /**
     * @type {XAPI}
     */
    this.xapi = xapi;
  }

  /**
   * Normalizes a path including the component prefix.
   *
   * @param {Array|string} path - Normalize an XAPI path.
   * @return {Array} - Normalized path.
   */

  /**
   * Prefix to add to all paths for the component.
   *
   * @type {string}
   */


  _createClass(Component, [{
    key: 'normalizePath',
    value: function normalizePath(path) {
      var normalized = (0, _normalizePath3.default)(path);
      var prefix = this.prefix;

      return !prefix ? normalized : [prefix].concat(normalized);
    }
  }]);

  return Component;
}();

/**
 * Interface to XAPI configurations.
 *
 * @extends {Component}
 * @extends {Listenable}
 * @extends {Gettable}
 * @extends {Settable}
 */


var Config = exports.Config = function (_mix) {
  _inherits(Config, _mix);

  function Config() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Config);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Config.__proto__ || Object.getPrototypeOf(Config)).call.apply(_ref, [this].concat(args))), _this), _this.prefix = 'Configuration', _temp), _possibleConstructorReturn(_this, _ret);
  }

  return Config;
}((0, _mixins.mix)(Component, _mixins.Listenable, _mixins.Gettable, _mixins.Settable));

/**
 * Interface to XAPI events.
 *
 * @extends {Component}
 * @extends {Listenable}
 */


var Event = exports.Event = function (_mix2) {
  _inherits(Event, _mix2);

  function Event() {
    var _ref2;

    var _temp2, _this2, _ret2;

    _classCallCheck(this, Event);

    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return _ret2 = (_temp2 = (_this2 = _possibleConstructorReturn(this, (_ref2 = Event.__proto__ || Object.getPrototypeOf(Event)).call.apply(_ref2, [this].concat(args))), _this2), _this2.prefix = 'Event', _temp2), _possibleConstructorReturn(_this2, _ret2);
  }

  return Event;
}((0, _mixins.mix)(Component, _mixins.Listenable));

/**
 * Interface to XAPI statuses.
 *
 * @extends {Component}
 * @extends {Listenable}
 * @extends {Gettable}
 */


var Status = exports.Status = function (_mix3) {
  _inherits(Status, _mix3);

  function Status() {
    var _ref3;

    var _temp3, _this3, _ret3;

    _classCallCheck(this, Status);

    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    return _ret3 = (_temp3 = (_this3 = _possibleConstructorReturn(this, (_ref3 = Status.__proto__ || Object.getPrototypeOf(Status)).call.apply(_ref3, [this].concat(args))), _this3), _this3.prefix = 'Status', _temp3), _possibleConstructorReturn(_this3, _ret3);
  }

  return Status;
}((0, _mixins.mix)(Component, _mixins.Listenable, _mixins.Gettable));